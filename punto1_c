import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import cv2
from scipy import signal

# PUNTO 1C
import numpy as np
import matplotlib.pyplot as plt

# Coeficientes de la ecuación de la resistencia para PT100 según la norma IEC 60751
A = 3.9083e-3
B = -5.775e-7
R0 = 100.0  # Resistencia nominal a 0°C en ohmios

def resistencia_PT100(temperatura):
    """
    Calcula la resistencia de un sensor PT100 para una temperatura dada en grados Celsius.
    """
    if temperatura < -200:
        temperatura = -200
    elif temperatura > 200:
        temperatura = 200

    return R0 * (1 + A * temperatura + B * temperatura**2)

# Crear una lista de temperaturas en el rango de -200°C a 200°C
temperaturas = np.linspace(-200, 200, 401)

# Calcular la resistencia correspondiente para cada temperatura
resistencias = [resistencia_PT100(temp) for temp in temperaturas]

# Graficar la relación entre la temperatura y la resistencia
plt.plot(temperaturas, resistencias)
plt.xlabel('Temperatura (°C)')
plt.ylabel('Resistencia del PT100 (Ω)')
plt.title('Comportamiento del sensor PT100')
plt.grid(True)
plt.show()
# -------------------------------------> PUNTO 2C <-------------------------------------
def respuesta_segundo_orden(K, wn, z):
    """
    Calcula la respuesta al escalón unitario de un sistema de segundo orden.
    """
    num = [K * wn**2]
    den = [1, 2 * z * wn, wn**2]
    t, y = signal.step((num, den))
    return t, y

def tipo_sistema(z):
    """
    Determina el tipo de sistema (subamortiguado, críticamente amortiguado o sobreamortiguado)
    basado en el coeficiente de amortiguamiento zeta.
    """
    if z < 1:
        return "Subamortiguado"
    elif z == 1:
        return "Críticamente Amortiguado"
    else:
        return "Sobreamortiguado"

# Pedir al usuario los coeficientes de la función de transferencia
K = float(input("Ingrese el coeficiente de ganancia K: "))
wn = float(input("Ingrese la frecuencia natural wn: "))
z = float(input("Ingrese el coeficiente de amortiguamiento ζ: "))

# Calcular la respuesta del sistema
t, y = respuesta_segundo_orden(K, wn, z)

# Graficar la respuesta
plt.plot(t, y)
plt.xlabel('Tiempo (s)')
plt.ylabel('Respuesta al escalón')
plt.title('Respuesta del sistema de segundo orden')
plt.grid(True)
plt.show()

# Determinar el tipo de sistema
tipo = tipo_sistema(z)
print(f"El sistema es {tipo}")

# -------------------------------------> PUNTO 3C <-------------------------------------

def carga_descarga_RC(V, C, R, tiempo):
    """
    Calcula el voltaje en un circuito RC durante el proceso de carga y descarga.
    """
    # Constante de tiempo (tau)
    tau = R * C

    # Voltaje de carga
    Vc_carga = V * (1 - np.exp(-tiempo / tau))

    # Voltaje de descarga
    Vc_descarga = V * np.exp(-tiempo / tau)

    return Vc_carga, Vc_descarga

# Pedir al usuario los valores de voltaje, capacitancia y resistencia
V = float(input("Ingrese el voltaje de la fuente (V): "))
C = float(input("Ingrese la capacitancia del capacitor (uF): "))
R = float(input("Ingrese la resistencia (Ω): "))

# Crear un rango de tiempo para la gráfica (0 a 5 tau)
tau = R * C
tiempo = np.linspace(0, 5 * tau, 1000)

# Calcular los voltajes de carga y descarga
Vc_carga, Vc_descarga = carga_descarga_RC(V, C, R, tiempo)

# Graficar la carga y descarga del capacitor
plt.plot(tiempo, Vc_carga, label='Carga del capacitor')
plt.plot(tiempo, Vc_descarga, label='Descarga del capacitor')
plt.xlabel('Tiempo (s)')
plt.ylabel('Voltaje del capacitor (V)')
plt.title('Carga y descarga de un capacitor en un circuito RC')
plt.legend()
plt.grid(True)
plt.show()
# -------------------------------------> PUNTO 4C <-------------------------------------

# Solicitar al usuario las coordenadas del vector
x = float(input("Ingrese la coordenada x del vector: "))
y = float(input("Ingrese la coordenada y del vector: "))
z = float(input("Ingrese la coordenada z del vector: "))

# Crear figura y ejes 3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Dibujar el vector desde el origen hasta las coordenadas ingresadas
ax.quiver(0, 0, 0, x, y, z, color='b', label='Vector')

# Configurar límites de los ejes
ax.set_xlim([0, max(x, 1)])
ax.set_ylim([0, max(y, 1)])
ax.set_zlim([0, max(z, 1)])

# Etiquetas de los ejes
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

# Mostrar leyenda y grilla
ax.legend()
ax.grid(True)

# Mostrar el gráfico
plt.show()

# -------------------------------------> PUNTO 5 <-------------------------------------
# Configuración del plot
fig, ax = plt.subplots(figsize=(5, 3))
ax.set_xlim(0, 6.5)
ax.set_ylim(0, 16)
ax.axis('off')

# Dibujar las letras del nombre "jose"
# Letra J
ax.plot([0.8, 1.2], [3, 3], color='blue', linewidth=3)
ax.plot([1, 1], [1.5, 3], color='blue', linewidth=3)
ax.plot([1, 0.2], [1.5, 1.5], color='blue', linewidth=3)
# Letra O
ax.add_patch(plt.Circle((2, 2.25), 0.75, color='green', fill=False, linewidth=3))
# Letra S
ax.plot([3, 4], [3, 3], color='red', linewidth=3)
ax.plot([3, 3], [3, 2.3], color='red', linewidth=3)
ax.plot([3, 4], [2.25, 2.25], color='red', linewidth=3)
ax.plot([4, 4], [2.2,1.5 ], color='red', linewidth=3)
ax.plot([3, 4], [1.5, 1.5], color='red', linewidth=3)
# Letra E
ax.plot([4.3, 5], [3, 3], color='purple', linewidth=3)
ax.plot([4.3, 5], [2.25, 2.25], color='purple', linewidth=3)
ax.plot([4.3, 5], [1.5, 1.5], color='purple', linewidth=3)
ax.plot([4.3, 4.3], [1.5, 3], color='purple', linewidth=3)

# Dibujar las letras del nombre "cesar"
# Letra C
ax.plot([0.2, 0.2], [5, 7.5], color='blue', linewidth=3)
ax.plot([0.2, 1], [5, 5], color='blue', linewidth=3)
ax.plot([0.2, 1], [7.5, 7.5], color='blue', linewidth=3)
# Letra E
ax.plot([1.2, 2], [7.5, 7.5], color='purple', linewidth=3)
ax.plot([1.2, 1.2], [7.5, 5], color='purple', linewidth=3)
ax.plot([1.2, 2], [5, 5], color='purple', linewidth=3)
ax.plot([1.2, 2], [6.4, 6.4], color='purple', linewidth=3)
# Letra S
ax.plot([2.3, 2.9], [7.5, 7.5], color='red', linewidth=3)
ax.plot([2.3, 2.3], [7.5, 6.4], color='red', linewidth=3)
ax.plot([2.3, 2.9], [6.4, 6.4], color='red', linewidth=3)
ax.plot([2.9, 2.9], [6.4, 5 ], color='red', linewidth=3)
ax.plot([2.9, 2.3], [5, 5], color='red', linewidth=3)
# Letra A
ax.plot([3.2, 3.5], [5, 7.5], color='purple', linewidth=3)
ax.plot([3.5, 3.8], [7.5, 5], color='purple', linewidth=3)
ax.plot([3.4, 3.6], [6.3, 6.3], color='purple', linewidth=3)
# Letra R
ax.plot([4, 4], [5, 7.5], color='green', linewidth=3)
ax.plot([4, 4.55], [7.5, 7.5], color='green', linewidth=3)
ax.plot([4.55, 4.55], [6.4, 7.5], color='green', linewidth=3)
ax.plot([4, 4.55], [6.4, 6.4], color='green', linewidth=3)
ax.plot([4, 4.55], [6.4, 5], color='green', linewidth=3)

# Dibujar las letras del nombre "MIGUEL"
# Letra M
ax.plot([0.2, 0.2], [8.5, 11], color='blue', linewidth=3)
ax.plot([0.2,0.5], [11, 10], color='blue', linewidth=3)
ax.plot([0.5, 0.8], [10, 11], color='blue', linewidth=3)
ax.plot([0.8, 0.8], [8.5, 11], color='blue', linewidth=3)
# Letra I
ax.plot([1.2, 1.2], [8.5, 11], color='purple', linewidth=3)
# Letra G
ax.plot([1.5, 1.5], [8.5, 11], color='red', linewidth=3)
ax.plot([1.5, 1.9], [8.5, 8.5], color='red', linewidth=3)
ax.plot([1.9, 1.9], [8.5, 10], color='red', linewidth=3)
ax.plot([1.9, 1.5], [10, 10 ], color='red', linewidth=3)
ax.plot([1.5, 1.9], [11, 11], color='red', linewidth=3)
# Letra U
ax.plot([2.2, 2.2], [8.5, 11], color='purple', linewidth=3)
ax.plot([2.2, 2.6], [8.5, 8.5], color='purple', linewidth=3)
ax.plot([2.6, 2.6], [8.5, 11], color='purple', linewidth=3)
# Letra E
ax.plot([2.9,2.9], [8.5, 11], color='green', linewidth=3)
ax.plot([2.9, 3.2], [8.5, 8.5], color='green', linewidth=3)
ax.plot([2.9, 3.2], [9.8, 9.8], color='green', linewidth=3)
ax.plot([2.9, 3.2], [11, 11], color='green', linewidth=3)
# Letra L
ax.plot([3.5, 3.5], [8.5, 11], color='blue', linewidth=3)
ax.plot([3.5, 3.8], [8.5, 8.5], color='blue', linewidth=3)

# Dibujar las letras del nombre "SANTIAGO"
# Letra S
ax.plot([0.2, 0.8], [12.5, 12.5], color='blue', linewidth=3)
ax.plot([0.8,0.2], [13.5, 13.5], color='blue', linewidth=3)
ax.plot([0.8, 0.8], [12.5, 13.5], color='blue', linewidth=3)
ax.plot([0.2, 0.2], [13.5, 14.5], color='blue', linewidth=3)
ax.plot([0.2, 0.8], [14.5, 14.5], color='blue', linewidth=3)
# Letra A
ax.plot([1.5, 1.2], [14.5, 12.5], color='purple', linewidth=3)
ax.plot([1.5, 1.8], [14.5, 12.5], color='purple', linewidth=3)
ax.plot([1.4, 1.6], [13.5, 13.5], color='purple', linewidth=3)
# Letra N
ax.plot([2.1, 2.1], [14.5, 12.5], color='red', linewidth=3)
ax.plot([2.1, 2.5], [14.5, 12.5], color='red', linewidth=3)
ax.plot([2.5, 2.5], [14.5,12.5 ], color='red', linewidth=3)
# Letra T
ax.plot([2.7,3.1], [14.5, 14.5], color='green', linewidth=3)
ax.plot([2.9, 2.9], [14.5, 12.5], color='green', linewidth=3)
# Letra I
ax.plot([3.3, 3.3], [14.5, 12.5], color='blue', linewidth=3)
# Letra A
ax.plot([3.9, 3.6], [14.5, 12.5], color='purple', linewidth=3)
ax.plot([3.9, 4.2], [14.5, 12.5], color='purple', linewidth=3)
ax.plot([3.9, 4], [13.5, 13.5], color='purple', linewidth=3)
# Letra G
ax.plot([4.5,4.5], [12.5, 14.5], color='green', linewidth=3)
ax.plot([4.5, 4.9], [12.5, 12.5], color='green', linewidth=3)
ax.plot([4.9, 4.9], [13.5, 12.5], color='green', linewidth=3)
ax.plot([4.5, 4.9], [13.5, 13.5], color='green', linewidth=3)
ax.plot([4.5, 4.9], [14.5, 14.5], color='green', linewidth=3)
# Letra O
ax.add_patch(plt.Circle((5.7, 13.5), 0.6, color='red', fill=False, linewidth=3))

plt.show()

# ---------------------------> PUNTO 6C <-------------------------------------
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import cv2

# Cargar las imágenes
image1 = cv2.imread('C:\\Users\\ADMIN\\Desktop\\ALGORITMOS ROBOTICOS\\Chevrolet.jpg')
image2 = cv2.imread('C:\\Users\\ADMIN\\Desktop\\ALGORITMOS ROBOTICOS\\mazda.jpg')
#Detección de bordes
imgCanny = cv2.Canny(image1,10,50)
imgCanny2 = cv2.Canny(image2,10,50)
# encontrar contornos
contornos, jerarquia = cv2.findContours( imgCanny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
print (len(contornos))
contornos1, jerarquia1 = cv2.findContours( imgCanny2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
print (len(contornos1))

# Imprimir coordenadas CHEVROLET
for contour in contornos:
    # Obtener los puntos extremos del contorno
    x, y, w, h = cv2.boundingRect(contour)
    # Dibujar un rectángulo alrededor del contorno en la primera imagen
    cv2.rectangle(imgCanny, (x, y), (x + w, y + h), (0, 255, 0), 2)
    # Mostrar las coordenadas del rectángulo en la primera imagen
    print("Coordenadas X e Y del contorno CHEVROLET:", x, y)

# Imprimir coordenadas MAZDA
for contour in contornos1:
    # Obtener los puntos extremos del contorno
    x, y, w, h = cv2.boundingRect(contour)
    # Dibujar un rectángulo alrededor del contorno en la primera imagen
    cv2.rectangle(imgCanny2, (x, y), (x + w, y + h), (0, 255, 0), 2)
    # Mostrar las coordenadas del rectángulo en la primera imagen
    print("Coordenadas X e Y del contorno MAZDA:", x, y)


# Mostrar las imágenes con los rectángulos dibujados
cv2.imshow("Chevrolet", imgCanny)
cv2.imshow("Mazda", imgCanny2)
cv2.waitKey(0)
cv2.destroyAllWindows()